package com.jsp.exp.project.service.impl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.jsp.exp.project.dto.AppResponceDTO;
import com.jsp.exp.project.dto.ChannelDTO;
import com.jsp.exp.project.service.CommonService;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@Service
@AllArgsConstructor
@NoArgsConstructor
public class CommonServiceImpl implements CommonService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CommonServiceImpl.class);

    private static final String API_URL = "http://localhost:8080/workqueue/";

    @Autowired
    @Qualifier("getRestTemplateobj")
    public RestTemplate restTemplate;

    @Override
    public AppResponceDTO processCreate(ChannelDTO channelDTO)
    {
        final String ENDPOINT_URL = "create";
        LOGGER.info("Sending request to create channel: {}", channelDTO);
        try 
        {
            HttpEntity<ChannelDTO> httpEntity = new HttpEntity<>(channelDTO);
            ResponseEntity<AppResponceDTO> response = restTemplate.exchange(
                API_URL + ENDPOINT_URL, HttpMethod.POST, httpEntity, AppResponceDTO.class
            );
            LOGGER.info("Received response for create: {}", response.getBody());
            LOGGER.info("Sending request to create channel: {}", channelDTO);
            return response.getBody();
            
        }
        catch (Exception e) 
        {
            LOGGER.error("Exception while processing create channel", e);
            AppResponceDTO errorResponse = new AppResponceDTO();
            errorResponse.setStatus("FAILURE");
            errorResponse.setStatusCode("500");
            errorResponse.setData(null);
            errorResponse.setError("Failed to process create request: " + e.getMessage());
            return errorResponse;
        }
        
    }

    @Override
    public AppResponceDTO getChannels() {
        final String ENDPOINT_URL = "get-all-channels";
        LOGGER.info("Requesting all channels");
        try {
            ResponseEntity<AppResponceDTO> response = restTemplate.exchange(
                API_URL + ENDPOINT_URL, HttpMethod.GET, null, AppResponceDTO.class
            );
            LOGGER.info("Received response for get-all-channels: {}", response.getBody());
            return response.getBody();
        } catch (Exception e) {
            LOGGER.error("Exception while fetching channels", e);
            AppResponceDTO errorResponse = new AppResponceDTO();
            errorResponse.setStatus("FAILURE");
            errorResponse.setStatusCode("500");
            errorResponse.setData(null);
            errorResponse.setError("Unable to fetch workqueue channels: " + e.getMessage());
            return errorResponse;
        }
    }
}
